ECOR 1041 Lab 1 Solution Template 

Author and Student Number: Joshua Noronha, 101194076

This file is to be used in conjunction with the detailed lab description for Lab 1.
Use this file to enter your answers to the series of exercises you will complete.

=========================================================================================

    Exploring Data Types and Operators

=========================================================================================

Exercise 1: A first interaction with the Python shell

>>> 1+2

Result (the value that was displayed): 3

===========
Exercise 2: Experiment - Do spaces matter? 

>>> 1 + 2

Result: 3

>>> 1     +       2

Result: 3


Concluding question (Record your conclusion here): What do you conclude about the significance of spaces in expressions? Does the number of spaces between the operands 
and operator affect the evaluation? 

# This experiment shows me that spaces do not matter. No, the number of spaces between the operands and operator does not affect the evaluation.

===========
Exercise 3: Using the built-in function called type(), explore different data types.

>>> type(1)

Result: <class 'int'>

>>> type(2)

Result: <class 'int'>

>>> type(0)

Result: <class 'int'>

>>> type(-1)

Result: <class 'int'>

>>> type(255)

Result: <class 'int'>

>>> type(-256)

Result: <class 'int'>

Concluding question: What type were all of these sample numbers?  

# The clasification of all these sample numbers were integers. 

===========
Exercise 4: Explore arithmetic operations on integers (including negative integers).

>>> 4 - 1

Result: 3

>>> 4 - 6

Result: -2

>>> 5 - -9

Result: 14

>>> -7 - -2

Result: -5

>>> 2 * 3

Result: 6

>>> 4 * -3

Result: -12

>>> -5 * -4

Result: 20

Concluding question: It appears that, for integer values, - is the subtraction operator and * is the multiplication operator. 
What can you conclude about the types of the values produced by these operations?

# I can conclude that the previous example and this example are similar since the values that are produced in this example are all integers.

===========
Exercise 5: Explore the arithmetic operation of division on integers

>>> 6 / 2

Result: 3.0

>>> -6 / 2

Result: -3.0

>>> 6 / -2

Result: -3.0

>>> type(6 / -2)

Result: <class 'float'>

>>> 7 / 2

Result: 3.5

>>> type(7 / 2)

Result: <class 'float'>

>>> 10 / 3

Result: 3.3333333333333335

>>> type(10 / 3)

Result: <class 'float'>

Concluding Question: What is the type of the value produced when one integer is divided by another. 

# The clasification of the value produced when one integer is divided by another is float.

===========
Exercise 6: Explore compound arithmetic operations.

>>> 1 + 2 + 3

Result: 6

>>> 5 - 1 - 1 - 1

Result: 2

>>> 2 * 2 * 3

Result: 12

>>> 12 / 3 / 2

Result: 2.0

Concluding Question: Does Python support more complicated expressions made up of several operands
and operators? 

# In this exaple Python shows that it is capable to support more complicated expressions that are made up of several operands and operators.

===========
Exercise 7: Explore operator precedence.

>>> 1 + 2 * 3

Result: 7

>>> 2 * 3 + 1

Result: 7

Concluding Question: What do you conclude about the precedence of the * operator relative to the + operator?

# I conclude that python follows the order of precedence and does * operator before the + operator.

===========
Exercise 8: Explore operator precedence further, with parentheses.

>>> (1 + 2) * 3

Result: 9

>>> 2 * (3 + 1)

Result: 8

Compare these results to the ones you obtained in Exercise 7.

Concluding Question: What do you conclude about the effect of parentheses on operator precedence?

# I conclude that python follows the order of precedence and does the operation within the brackets first and it is followed by the * operator.

===========
Exercise 9: This exercise is different.  Instead of exploring a question using a supplied list
of shell commands as your experiment, you are going to design your own experiment
to answer the question by yourself. In a way, you'll be writing your own first program independently!

In mathematics, an expression involving multiplication can sometimes be written in two ways:
       2 x (3 + 4)    where the x multiplication operator is EXPLICITLY used
       2 (3 + 4)      where the x multiplication operator is IMPLICITLY assumed.
  
The question is: Does Python support "implicit multiplication"?

You must design an experiment (a series of shell commands, as in other exercises) which prove
the answer one way or the other.

Record your experiment's shell commands here:

>>> 2 * (3 + 4)

Result: 14

>>> 3 * (2 + 4)

Result: 18

>>> 2(3 + 4)

Result: x-wingide-python-shell://119773104/39:1: SyntaxWarning: 'int' object is not callable; perhaps you missed a comma?
Traceback (most recent call last):
  Python Shell, prompt 38, line 1
builtins.TypeError: 'int' object is not callable

>>> 3(2 + 4)


Result: x-wingide-python-shell://119773104/40:1: SyntaxWarning: 'int' object is not callable; perhaps you missed a comma?
Traceback (most recent call last):
  Python Shell, prompt 39, line 1
builtins.TypeError: 'int' object is not callable

Record your conclusion here: Does Python support implicit multiplication?

# Python does not support implicit multiplication, since the results of the implicit examples are errors because the operator is missing for each case. 

===========
Exercise 10: Explore the Python's exponentiation operator **.
   NOTE: For advanced students, do not use Python's pow() function. Not yet. 

>>> 3 ** 2

Result: 9

>>> -3 ** 2

Result: -9

Concluding question: Explain *WHY* the results of the second shell command is NOT 
the square of -3. Describe the order of operations performed by the computer.

# The order of operations that is performed by the computer is the square of 3, then the negative is applied thus the answer is -9

Concluding question: Write a shell command that correctly calculates the square of -3? 
You must use the ** operator. You must NOT use the pow() function.

>>> (-3) ** 2

Result: 9

===========

Exercise 11: More exploration of division in Python.  Exercise 5 introduced the / operator.
In this exercise, you will use the // operator.

>> 11 // 4

Prediction: 2

>> -11 // 4

Prediction: -3

>> 11 // -4

Prediction: -3

>> -11 // -4

Prediction: 2

Concluding Question: Explain the difference between the / operator and the // operator.
In your explanation, include descriptions of what results are produced for different
combinations of signs (positive/negative)

# / operator is used for division so the result of 11/4 is 2.75, the // operator is used to truncate the result in order to give an int value it is also known as floor division (//)
# For the positive results where there was no negative sign in the calculations number  or two negative sign e.g 11 // 4 , -11 // -4 , python truncates to the lowest integer which is 2
# For the negative results where there is a negative sign in any of the calculations number e.g -11 // 4 , 11 // -4 , python truncates to the lowest integer which is -3

===========

Exercise 12: Exploring the Modulus Operator
 TIP: Exercise 11 and 12 go together.  The sequence of commands is identical,
except for a change in the operator.  

>> 11 % 4

Prediction: 3

>> -11 % 4

Prediction: 1

>> 11 % -4

Prediction: -1

>> -11 % -4

Prediction: -3

Concluding Question: Explain the behaviour of the modulus operator. What value does it return?
In your explanation, include descriptions of what results are produced for different
combinations of signs (positive/negative)

# The % operator is used to find the remainder, e.g 11 % 4 the operation that is executed in the modulus operator is to floor divide (//) the numbers 11 // 4 which is 2 ,then find the quotient by doing 2*4 which is 8 and subtract the initial number by quotient so 11-8 which is 3 
# For the positive results produced by e.g 11 % 4 , -11 % 4 , this causes positive results, in the second example the floor division (//) is -3 and the quotient is -12, lastly initial number - quotient is 1
# For the negative results produced by e.g 11 % -4 , -11 % -4 , this causes negative results, in the second example the floor division (//) is 2 and the quotient is -8, lastly initial number - quotient is -3 
=========================================================================================


Last edited: October 27, 2020
